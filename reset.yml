---
# Reset Kubernetes Cluster
# WARNING: This will completely destroy the existing cluster!

- name: Reset Kubernetes Control Plane
  hosts: control_plane
  become: true
  gather_facts: false
  serial: 1

- name: Reset Kubernetes Worker Nodes (Concurrent)
  hosts: workers
  become: true
  gather_facts: false
  # Process all workers in parallel

  tasks:
    - name: Stop services before reset
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop:
        - kubelet
        - containerd
      failed_when: false

    - name: Stop WireGuard service
      ansible.builtin.systemd:
        name: "wg-quick@{{ wireguard_interface | default('wg0') }}"
        state: stopped
        enabled: false
      failed_when: false

    - name: Reset Kubernetes configuration
      ansible.builtin.command: kubeadm reset --force
      register: kubeadm_reset_result
      changed_when: "'The reset process does not clean' in kubeadm_reset_result.stdout or kubeadm_reset_result.rc == 0"
      failed_when: false

    - name: Remove CNI bridge interfaces
      ansible.builtin.shell: |
        for bridge in cni0 docker0 flannel.1; do
          if ip link show $bridge >/dev/null 2>&1; then
            echo "Removing bridge: $bridge"
            ip link delete $bridge
          fi
        done
      register: bridge_removal_reset
      changed_when: "'Removing bridge:' in bridge_removal_reset.stdout"
      failed_when: false

    - name: Remove WireGuard configuration
      ansible.builtin.file:
        path: "/etc/wireguard/{{ wireguard_interface | default('wg0') }}.conf"
        state: absent
      failed_when: false

    - name: Unhold Kubernetes packages
      ansible.builtin.shell: |
        apt-mark unhold kubelet kubeadm kubectl || true
        dpkg --configure -a || true
      changed_when: false
      failed_when: false

    - name: Remove Kubernetes packages
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - kubernetes-cni
        state: absent
        autoremove: true
        purge: true
      failed_when: false

    - name: Remove containerd and dependencies
      ansible.builtin.apt:
        name:
          - containerd
          - containerd.io
          - docker-ce
          - docker-ce-cli
        state: absent
        autoremove: true
        purge: true
      failed_when: false

    - name: Remove WireGuard
      ansible.builtin.package:
        name:
          - wireguard
          - wireguard-tools
        state: absent
      failed_when: false

    - name: Force clean up directories
      ansible.builtin.shell: |
        rm -rf {{ item }} || true
        umount {{ item }}/* 2>/dev/null || true
        rm -rf {{ item }} || true
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - /etc/cni
        - /opt/cni
        - /var/lib/containerd
        - /var/run/secrets
        - /var/lib/cni
      changed_when: false
      failed_when: false

    - name: Clean up user directories safely
      ansible.builtin.shell: |
        rm -rf /home/*/cni.csr 2>/dev/null || true
        rm -rf /home/*/.kube 2>/dev/null || true
        rm -rf /root/.kube 2>/dev/null || true
      changed_when: false
      failed_when: false

    - name: Reset UFW to defaults (preserving SSH)
      ansible.builtin.shell: |
        # Reset UFW but do not disable to preserve connectivity
        ufw --force reset || true

        # Ensure SSH is allowed before enabling
        ufw allow 22/tcp comment "SSH access" || true

        # Set default policies
        ufw default deny incoming || true
        ufw default allow outgoing || true

        # Enable UFW safely
        ufw --force enable || true

        echo "UFW reset to defaults with SSH preserved"
      register: ufw_reset_status
      changed_when: "'UFW reset to defaults with SSH preserved' in ufw_reset_status.stdout"
      failed_when: false

    - name: Remove hosts entry for worker nodes
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^.*k8s\\.shion1305\\.com.*$"
        state: absent
      when: inventory_hostname in groups['workers']
      failed_when: false

    - name: Clean up systemd services
      ansible.builtin.systemd:
        daemon_reload: true
      failed_when: false

    - name: Reset failed systemd services
      ansible.builtin.command: systemctl reset-failed
      changed_when: false
      failed_when: false

    - name: Reboot nodes to ensure clean state
      ansible.builtin.reboot:
        msg: "Rebooting after Kubernetes cluster reset"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 10
        post_reboot_delay: 30
        test_command: uptime
      failed_when: false

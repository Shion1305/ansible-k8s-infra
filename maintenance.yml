---
# Kubernetes Cluster Maintenance Operations
# This playbook provides common maintenance tasks

- name: Clean CNI Bridge Interfaces
  hosts: workers
  become: true
  gather_facts: false

  tasks:
    - name: Stop kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: stopped
      failed_when: false

    - name: Remove CNI bridge interfaces
      ansible.builtin.shell: |
        for bridge in cni0 docker0 flannel.1; do
          if ip link show $bridge >/dev/null 2>&1; then
            echo "Removing bridge: $bridge"
            ip link delete $bridge
          fi
        done
      register: bridge_removal
      changed_when: "'Removing bridge:' in bridge_removal.stdout"
      failed_when: false

    - name: Clear CNI network state
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/cni/networks
        - /var/lib/cni/results
      failed_when: false

    - name: Start kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true

- name: Verify WireGuard Status
  hosts: all
  become: true
  gather_facts: false

  tasks:
    - name: Check WireGuard interface status
      ansible.builtin.command: wg show {{ wireguard_interface }}
      register: wg_status
      changed_when: false

    - name: Display WireGuard status
      ansible.builtin.debug:
        msg: "{{ wg_status.stdout_lines }}"

    - name: Test WireGuard connectivity to control plane
      ansible.builtin.command: ping -c 3 {{ hostvars[groups['control_plane'][0]]['wireguard_ip'] }}
      register: ping_result
      changed_when: false
      when: inventory_hostname not in groups['control_plane']

    - name: Display ping results
      ansible.builtin.debug:
        msg: "{{ ping_result.stdout_lines }}"
      when: inventory_hostname not in groups['control_plane'] and ping_result is defined

- name: Cluster Health Check
  hosts: control_plane
  become: false
  gather_facts: false

  tasks:
    - name: Check cluster nodes
      ansible.builtin.command: kubectl get nodes -o wide
      register: cluster_nodes
      changed_when: false

    - name: Check system pods
      ansible.builtin.command: kubectl get pods -n kube-system -o wide
      register: system_pods
      changed_when: false

    - name: Check Flannel pods
      ansible.builtin.command: kubectl get pods -n kube-flannel -o wide
      register: flannel_pods
      changed_when: false

    - name: Display cluster status
      ansible.builtin.debug:
        msg: |
          === CLUSTER NODES ===
          {{ cluster_nodes.stdout }}

          === SYSTEM PODS ===
          {{ system_pods.stdout }}

          === FLANNEL PODS ===
          {{ flannel_pods.stdout }}

- name: Update Cluster Components
  hosts: all
  become: true
  gather_facts: false

  tasks:
    - name: Update package cache
      ansible.builtin.package:
        update_cache: true
      when: ansible_os_family == "Debian"

    - name: Upgrade Kubernetes packages (hold packages first)
      ansible.builtin.shell: |
        apt-mark unhold kubelet kubeadm kubectl
        apt-get update
        apt-get install -y kubelet kubeadm kubectl
        apt-mark hold kubelet kubeadm kubectl
      when: ansible_os_family == "Debian"
      register: apt_upgrade_status
      changed_when: "'0 upgraded, 0 newly installed' not in apt_upgrade_status.stdout"
      failed_when: false

- name: Restart Cluster Services
  hosts: all
  become: true
  gather_facts: false
  serial: 1

  tasks:
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    - name: Restart kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: restarted

    - name: Wait for node to be ready
      ansible.builtin.command: kubectl get node {{ ansible_hostname }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: node_ready
      until: node_ready.stdout == "True"
      retries: 30
      delay: 10
      delegate_to: "{{ groups['control_plane'][0] }}"
      become: false
      changed_when: false
      when: inventory_hostname in groups['control_plane']

---
- name: Check if Kubernetes is already initialized
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: kubeconfig_exists

- name: Initialize Kubernetes control plane
  ansible.builtin.command: >
    kubeadm init
    --apiserver-advertise-address={{ apiserver_advertise_address }}
    --control-plane-endpoint={{ control_plane_endpoint }}
    --pod-network-cidr={{ pod_network_cidr }}
    --upload-certs
  register: kubeadm_init
  when: not kubeconfig_exists.stat.exists

- name: Create .kube directory
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: "0700"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Copy kubeconfig to user home
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
    remote_src: true

- name: Update kubeconfig server endpoint
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_user }}/.kube/config"
    regexp: "server: https://.*:6443"
    line: "    server: https://{{ control_plane_endpoint }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Generate join command for worker nodes
  ansible.builtin.command: kubeadm token create --print-join-command
  register: join_command
  changed_when: false

- name: Store join command
  ansible.builtin.set_fact:
    kubernetes_join_command: "{{ join_command.stdout }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['workers'] }}"
  run_once: true

---
- name: Install WireGuard
  ansible.builtin.package:
    name:
      - wireguard
      - wireguard-tools
    state: present

- name: Resolve control plane public IP
  ansible.builtin.set_fact:
    wireguard_control_plane_public_ip: "{{ lookup('dig', hostvars[groups['control_plane'][0]]['ansible_host']) }}"
  run_once: true
  delegate_to: localhost
  when: inventory_hostname in groups['control_plane'] or inventory_hostname in groups['workers']

- name: Generate WireGuard private key
  ansible.builtin.command: wg genkey
  register: wireguard_private_key
  changed_when: false
  no_log: true

- name: Generate WireGuard public key
  ansible.builtin.shell: |
    set -o pipefail
    echo "{{ wireguard_private_key.stdout }}" | wg pubkey
  register: wireguard_public_key
  changed_when: false
  no_log: true

- name: Store keys in facts
  ansible.builtin.set_fact:
    wireguard_private_key_fact: "{{ wireguard_private_key.stdout }}"
    wireguard_public_key_fact: "{{ wireguard_public_key.stdout }}"
  no_log: true

- name: Create WireGuard configuration
  ansible.builtin.template:
    src: "{{ wireguard_interface }}.conf.j2"
    dest: "/etc/wireguard/{{ wireguard_interface }}.conf"
    mode: "0600"
    backup: true
  notify: restart wireguard

- name: Enable and start WireGuard service
  ansible.builtin.systemd:
    name: "wg-quick@{{ wireguard_interface }}"
    enabled: true
    state: started

- name: Wait for WireGuard interface to be up
  ansible.builtin.wait_for:
    timeout: 30
  delegate_to: localhost

- name: Verify WireGuard interface
  ansible.builtin.command: "wg show {{ wireguard_interface }}"
  register: wireguard_wg_status
  changed_when: false

- name: Display WireGuard status
  ansible.builtin.debug:
    msg: "{{ wireguard_wg_status.stdout_lines }}"

# Firewall rules are now handled by UFW in the main playbook
# This ensures consistent firewall management across all nodes

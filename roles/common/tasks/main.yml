---
- name: Install common packages
  ansible.builtin.package:
    name:
      - curl
      - wget
      - gnupg
      - software-properties-common
      - apt-transport-https
      - ca-certificates
      - lsb-release
    state: present

# -----------------------------
# Swap: disable only if enabled
# -----------------------------
- name: Check if any swap is active
  ansible.builtin.command: swapon --summary
  register: common_swapon_summary
  changed_when: false

- name: Disable swap for Kubernetes when enabled
  ansible.builtin.command: swapoff -a
  when: common_swapon_summary.stdout | trim != ""
  # `swapoff --summary` should be empty if no swap is active.
  changed_when: true

- name: Remove any swap entries from fstab
  # This is idempotent, if no swap entries exist, nothing changes.
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '^\s*[^#]+\s+none\s+swap\s+'
    state: absent # Removes swap entries
  # This will be marked as changed only when files changed by this task.

- name: Load kernel modules
  # This is idempotent, loading an already loaded module has no effect.
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Make kernel modules persistent
  # Ensures the file exists with exactly this content, and these modules load at boot.
  ansible.builtin.copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf
    mode: "0644"
    owner: root
    group: root
  # Marked as changed only when file content changes.

- name: Set sysctl parameters for Kubernetes
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
  # Marked as changed only when sysctl values change.

- name: Fix DNS resolution for containerd (non-systemd-resolved systems)
  block:
    - name: Check if systemd-resolved is running
      ansible.builtin.systemd:
        name: systemd-resolved
      register: common_systemd_resolved_status
      changed_when: false # This is just a check
      failed_when: false

    - name: Create systemd resolve directory
      ansible.builtin.file:
        path: /run/systemd/resolve
        state: directory
        mode: "0755"
      # Skips entirely when systemd-resolved is active.
      when: common_systemd_resolved_status.status.ActiveState|default('') != 'active'

    - name: Create resolv.conf symlink for containerd
      ansible.builtin.file:
        src: /etc/resolv.conf
        dest: /run/systemd/resolve/resolv.conf
        state: link
        force: true
      when: common_systemd_resolved_status.status.ActiveState|default('') != 'active'

- name: Install CNI plugins
  block:
    - name: Download CNI plugins
      ansible.builtin.get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ architecture }}-{{ cni_version }}.tgz"
        dest: "/tmp/cni-plugins-{{ architecture }}.tgz"
        mode: "0644"

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins-{{ architecture }}.tgz"
        dest: /opt/cni/bin
        remote_src: true

    - name: Verify loopback plugin installation
      ansible.builtin.stat:
        path: /opt/cni/bin/loopback
      register: common_loopback_plugin

    - name: Fail if loopback plugin not found
      ansible.builtin.fail:
        msg: "CNI loopback plugin not found at /opt/cni/bin/loopback"
      when: not common_loopback_plugin.stat.exists

    - name: Clean up CNI archive
      ansible.builtin.file:
        path: "/tmp/cni-plugins-{{ architecture }}.tgz"
        state: absent
